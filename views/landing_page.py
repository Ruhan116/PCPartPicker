from PyQt6 import QtCore, QtWidgets, QtGui
from controllers.data_controller import DataController
from data.data_loader.Load_Data import PCComponentScraper
from data.data_loader.build_table import BuildTable
from models.Session import Session
import sqlite3


# Form implementation generated from reading ui file 'landing_page.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 800)
        MainWindow.setStyleSheet("background-color: white;")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(-4, -1, 1201, 801))
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.TabPosition.West)
        self.tabWidget.setObjectName("tabWidget")
        self.Builder = QtWidgets.QWidget()
        self.Builder.setObjectName("Builder")
        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.Builder)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(-1, -1, 1201, 791))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.frame = QtWidgets.QFrame(parent=self.verticalLayoutWidget)
        self.frame.setStyleSheet(" background-color: rgb(44, 136, 196);")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(parent=self.frame)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(0, 0, 1171, 56))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_3 = QtWidgets.QLabel(parent=self.horizontalLayoutWidget_3)
        self.label_3.setStyleSheet("border-radius: 10px;\n"
"font-family: Arial, Helvetica, sans-serif;\n"
"font-weight: bold;\n"
"color: white;")
        self.label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        self.horizontalLayout_3.addWidget(self.frame)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.label = QtWidgets.QLabel(parent=self.verticalLayoutWidget)
        self.label.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label.setStyleSheet("color: black;\n"
"font-size: 50px;\n"
"font-weight: bold;\n"
"font-family: Arial, Helvetica, sans-serif;")
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignBottom|QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(parent=self.verticalLayoutWidget)
        self.label_2.setStyleSheet("    color: rgb(161, 157, 154);\n"
"    font-size: 15px;\n"
"    font-family: Arial, Helvetica, sans-serif;")
        self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setContentsMargins(250, -1, 250, 250)
        self.horizontalLayout_2.setSpacing(20)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.pushButton_2.setStyleSheet("    width: 50px;\n"
"    height: 45px;\n"
"    padding-left: 10px;\n"
"    padding-right: 10px;\n"
"    font-size: 19px;\n"
"    background-color: rgb(44, 136, 196);\n"
"    color: white;\n"
"    border: none;\n"
"    border-radius: 10px;\n"
"    font-family: Arial, Helvetica, sans-serif;\n"
"    font-weight: bold;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.pushButton.setStyleSheet("    width: 50px;\n"
"    height: 45px;\n"
"    padding-left: 10px;\n"
"    padding-right: 10px;\n"
"    font-size: 19px;\n"
"    background-color: rgb(44, 136, 196);\n"
"    border: none;\n"
"    border-radius: 10px;\n"
"    font-family: Arial, Helvetica, sans-serif;\n"
"    font-weight: bold;\n"
"    color: white;")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 6)
        self.verticalLayout.setStretch(3, 6)
        self.tabWidget.addTab(self.Builder, "")
        self.Socials = QtWidgets.QWidget()
        self.Socials.setObjectName("My Builds")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(parent=self.Socials)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 0, 1201, 791))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.frame_6 = QtWidgets.QFrame(parent=self.verticalLayoutWidget_2)
        self.frame_6.setStyleSheet(" background-color: rgb(44, 136, 196);")
        self.frame_6.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayoutWidget_9 = QtWidgets.QWidget(parent=self.frame_6)
        self.horizontalLayoutWidget_9.setGeometry(QtCore.QRect(0, 0, 1171, 56))
        self.horizontalLayoutWidget_9.setObjectName("horizontalLayoutWidget_9")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_9)
        self.horizontalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.label_11 = QtWidgets.QLabel(parent=self.horizontalLayoutWidget_9)
        self.label_11.setStyleSheet("border-radius: 10px;\n"
"font-family: Arial, Helvetica, sans-serif;\n"
"font-weight: bold;\n"
"color: white;")
        self.label_11.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_17.addWidget(self.label_11)
        self.horizontalLayout_16.addWidget(self.frame_6)
        self.verticalLayout_4.addLayout(self.horizontalLayout_16)
        self.scrollArea = QtWidgets.QScrollArea(parent=self.verticalLayoutWidget_2)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1197, 716))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayoutWidget = QtWidgets.QWidget(parent=self.scrollAreaWidgetContents)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(-1, -11, 1181, 731))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_4.addWidget(self.scrollArea)
        self.verticalLayout_4.setStretch(0, 1)
        self.verticalLayout_4.setStretch(1, 11)
        self.tabWidget.addTab(self.Socials, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "Username"))
        self.label.setText(_translate("MainWindow", "Pick Parts. Build Your PC. \n"
"Compare and Share. "))
        self.label_2.setText(_translate("MainWindow", "We provide part selection, pricing, and compatibility guidance\n"
" for do-it-yourself computer builders."))
        self.pushButton_2.setText(_translate("MainWindow", "Start Your Build"))
        self.pushButton.setText(_translate("MainWindow", "Reload Database"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Builder), _translate("MainWindow", "Builder"))
        self.label_11.setText(_translate("MainWindow", "Username"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Socials), _translate("MainWindow", "My Builds"))


class LandingPage(QtWidgets.QMainWindow):
    def __init__(self, stacked_widget):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.stacked_widget = stacked_widget
        self.db_path = "data/database/database.sqlite"
        self.tile_counter = 0  # Initialize counter

        # Initialize controllers
        self.data_controller = DataController()
        self.scraper = PCComponentScraper()

        # Connect buttons
        self.ui.pushButton_2.clicked.connect(self.go_to_choosing_parts)
        self.ui.pushButton.clicked.connect(self.reload_database)

        # Apply stylesheet
        self.apply_stylesheet()

        # Update labels with current user's username
        self.update_labels()

        # Load builds from database
        self.load_builds()

    def load_builds(self):
        """Load all builds from database and display them"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Clear existing widgets
            self.clear_grid_layout()
            
            # Fetch all builds
            cursor.execute("SELECT build_id FROM Builds")
            builds = cursor.fetchall()
            
            if not builds:
                no_builds_label = QtWidgets.QLabel("No builds found")
                no_builds_label.setStyleSheet("font-size: 16px; color: gray;")
                no_builds_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                self.ui.gridLayout.addWidget(no_builds_label, 0, 0)
                return
                
            for row, (build_id,) in enumerate(builds):
                self.add_build_tile(build_id, row)
                self.tile_counter += 1
                
        except sqlite3.Error as e:
            print(f"Database error: {e}")
        finally:
            if conn:
                conn.close()
    
    def show_build_details(self, build_id):
        """Show details for a specific build"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Fetch the build details from database
            cursor.execute("""
                SELECT * FROM Builds 
                WHERE build_id = ?
            """, (build_id,))
            
            build_data = cursor.fetchone()
            
            if build_data:
                # Create a dictionary with all build components
                columns = [
                    'user_id', 'build_id', 'cpu', 'mobo', 'gpu', 
                    'ram1', 'ram2', 'hdd1', 'hdd2', 'ssd1', 'ssd2', 
                    'psu', 'cases', 'cpu_cooler', 'monitor', 'price'
                ]
                build_dict = dict(zip(columns, build_data))
                
                # Create and show the details window
                from views.details_page import BuildDetailsWindow  # Import here to avoid circular imports
                self.details_window = BuildDetailsWindow(build_dict)
                self.details_window.back_signal.connect(self.show)
                self.details_window.show()
                self.hide()
                
        except sqlite3.Error as e:
            print(f"Database error: {e}")
        finally:
            if conn:
                conn.close()

    # Remove the duplicate add_tile method and keep only add_build_tile
    def add_build_tile(self, build_id, row):
        """Add a tile for a specific build"""
        tile = QtWidgets.QFrame()
        tile.setFixedSize(750, 100)
        tile.setStyleSheet("""
            background-color: #f0f8ff;
            border: 1px solid #2c88c4;
            border-radius: 10px;
            margin: 10px;
            padding: 10px;
        """)

        layout = QtWidgets.QHBoxLayout(tile)

        # Build ID label
        build_label = QtWidgets.QLabel(f"Build #{build_id}")
        build_label.setStyleSheet("font-size: 18px; font-weight: bold;")
        layout.addWidget(build_label)

        # Spacer
        layout.addStretch()

        # Details button
        details_btn = QtWidgets.QPushButton("View Details")
        details_btn.setStyleSheet("""
            QPushButton {
                background-color: #2c88c4;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 8px 16px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #1a6ea8;
            }
        """)
        details_btn.clicked.connect(lambda _, bid=build_id: self.show_build_details(bid))
        layout.addWidget(details_btn)

        self.ui.gridLayout.addWidget(tile, row, 0)

    def clear_grid_layout(self):
        """Remove all existing widgets from the grid layout"""
        while self.ui.gridLayout.count():
            item = self.ui.gridLayout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()

    def apply_stylesheet(self):
        """Apply the QSS stylesheet to the window"""
        try:
            with open("./style/landing_page_style.qss", "r") as file:
                qss = file.read()
                self.setStyleSheet(qss)
        except FileNotFoundError:
            print("QSS file not found. Using default styling.")

    def go_to_choosing_parts(self):
        """Switch to the choosing parts page in the stacked widget"""
        choosing_parts_page = self.stacked_widget.widget(3)
        main_window = self.stacked_widget.window()
        main_window.resize(choosing_parts_page.size())
        self.stacked_widget.setCurrentWidget(choosing_parts_page)
        bt = BuildTable()
        bt.create_build_table()

    def reload_database(self):
        """Reload the database by scraping and storing all data"""
        print("Reloading database...")
        self.scraper.scrape_all()
        self.data_controller.store_all_data()
        print("Database reloaded successfully.")
        self.go_to_choosing_parts()
        bt = BuildTable()
        bt.create_build_table()

    

    def update_labels(self):
        """Update the labels with the current user's username from the session"""
        username = Session().get_user()  # Get the current logged-in user
        if username:
            self.ui.label_3.setText(f"Welcome, {username}")
            self.ui.label_11.setText(f"Logged in as: {username}")
            print(f"Welcome, {username}")
        else:
            self.ui.label_3.setText("Welcome")
            self.ui.label_11.setText("Not logged in")
            print("Not logged in")


