from PyQt6 import QtCore, QtWidgets, QtGui
from controllers.data_controller import DataController
from data.data_loader.Load_Data import PCComponentScraper
from data.data_loader.build_table import BuildTable
from models.Session import Session
import sqlite3

# Form implementation generated from reading ui file 'landing_page.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        MainWindow.setStyleSheet("background-color: white;")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1280, 720))
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.TabPosition.West)
        self.tabWidget.setObjectName("tabWidget")
        self.Builder = QtWidgets.QWidget()
        self.Builder.setObjectName("Builder")
        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.Builder)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1280, 720))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.frame = QtWidgets.QFrame(parent=self.verticalLayoutWidget)
        self.frame.setStyleSheet(" background-color: rgb(44, 136, 196);")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(parent=self.frame)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(0, 0, 1280, 60))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_3 = QtWidgets.QLabel(parent=self.horizontalLayoutWidget_3)
        self.label_3.setStyleSheet("border-radius: 10px;\n"
"font-family: Arial, Helvetica, sans-serif;\n"
"font-weight: bold;\n"
"color: white;\n"
"margin-right: 30px;")
        self.label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        self.horizontalLayout_3.addWidget(self.frame)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.label = QtWidgets.QLabel(parent=self.verticalLayoutWidget)
        self.label.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label.setStyleSheet("color: black;\n"
"font-size: 50px;\n"
"font-weight: bold;\n"
"font-family: Arial, Helvetica, sans-serif;")
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignBottom|QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(parent=self.verticalLayoutWidget)
        self.label_2.setStyleSheet("    color: rgb(161, 157, 154);\n"
"    font-size: 15px;\n"
"    font-family: Arial, Helvetica, sans-serif;")
        self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setContentsMargins(250, -1, 250, 250)
        self.horizontalLayout_2.setSpacing(20)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.pushButton_2.setStyleSheet("    width: 50px;\n"
"    height: 45px;\n"
"    padding-left: 10px;\n"
"    padding-right: 10px;\n"
"    font-size: 19px;\n"
"    background-color: rgb(44, 136, 196);\n"
"    color: white;\n"
"    border: none;\n"
"    border-radius: 10px;\n"
"    font-family: Arial, Helvetica, sans-serif;\n"
"    font-weight: bold;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.pushButton.setStyleSheet("    width: 50px;\n"
"    height: 45px;\n"
"    padding-left: 10px;\n"
"    padding-right: 10px;\n"
"    font-size: 19px;\n"
"    background-color: rgb(44, 136, 196);\n"
"    border: none;\n"
"    border-radius: 10px;\n"
"    font-family: Arial, Helvetica, sans-serif;\n"
"    font-weight: bold;\n"
"    color: white;")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 6)
        self.verticalLayout.setStretch(3, 6)
        self.tabWidget.addTab(self.Builder, "")
        self.Socials = QtWidgets.QWidget()
        self.Socials.setObjectName("My Builds")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(parent=self.Socials)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 0, 1280, 720))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.frame_6 = QtWidgets.QFrame(parent=self.verticalLayoutWidget_2)
        self.frame_6.setStyleSheet(" background-color: rgb(44, 136, 196);")
        self.frame_6.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayoutWidget_9 = QtWidgets.QWidget(parent=self.frame_6)
        self.horizontalLayoutWidget_9.setGeometry(QtCore.QRect(0, 0, 1280, 60))
        self.horizontalLayoutWidget_9.setObjectName("horizontalLayoutWidget_9")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_9)
        self.horizontalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.label_11 = QtWidgets.QLabel(parent=self.horizontalLayoutWidget_9)
        self.label_11.setStyleSheet("border-radius: 10px;\n"
"font-family: Arial, Helvetica, sans-serif;\n"
"font-weight: bold;\n"
"color: white;"
"margin-right: 30px;")
        self.label_11.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_17.addWidget(self.label_11)
        self.horizontalLayout_16.addWidget(self.frame_6)
        self.verticalLayout_4.addLayout(self.horizontalLayout_16)
        self.scrollArea = QtWidgets.QScrollArea(parent=self.verticalLayoutWidget_2)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1280, 720))
        self.scrollAreaWidgetContents.setContentsMargins(0, 0, 0, 0)
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayoutWidget = QtWidgets.QWidget(parent=self.scrollAreaWidgetContents)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1280, 720))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_4.addWidget(self.scrollArea)
        self.verticalLayout_4.setStretch(0, 1)
        self.verticalLayout_4.setStretch(1, 11)
        self.tabWidget.addTab(self.Socials, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "Username"))
        self.label.setText(_translate("MainWindow", "Pick Parts. Build Your PC. \n"
"Compare Different Builds. "))
        self.label.setStyleSheet("""
            color: black;
            font-size: 50px;
            font-weight: bold;
            font-family: Arial, Helvetica, sans-serif;
            margin-bottom: 10px;  /* Add a 10-pixel margin to the bottom */
        """)
        self.label_2.setText(_translate("MainWindow", "We provide part selection, pricing, and compatibility guidance\n"
" for do-it-yourself computer builders."))
        self.pushButton_2.setText(_translate("MainWindow", "Start Your Build"))
        self.pushButton.setText(_translate("MainWindow", "Reload Database"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Builder), _translate("MainWindow", "Builder"))
        self.label_11.setText(_translate("MainWindow", "Username"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Socials), _translate("MainWindow", "My Builds"))


class LandingPage(QtWidgets.QMainWindow):
    def __init__(self, stacked_widget):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.stacked_widget = stacked_widget

        # Initialize controllers
        self.data_controller = DataController()
        self.scraper = PCComponentScraper()

        # Connect buttons
        self.ui.pushButton_2.clicked.connect(self.go_to_choosing_parts)  # Start Your Build button
        self.ui.pushButton.clicked.connect(self.reload_database)  # Reload Database button

        # Setup for dynamic tiles in Socials tab
        self.tile_counter = 0
        # self.tile_timer = QtCore.QTimer(self)
        # self.tile_timer.timeout.connect(self.add_tile)
        # self.tile_timer.start(1000)  # Add a tile every 4 
        self.load_user_builds()

        print(Session().get_user())

        # Apply stylesheet
        self.apply_stylesheet()

        # Update labels with current user's username
        self.update_labels()

    def clear_grid_layout(self):
        """Remove all existing widgets from the grid layout"""
        while self.ui.gridLayout.count():
            item = self.ui.gridLayout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()

    def apply_stylesheet(self):
        """Apply the QSS stylesheet to the window"""
        try:
            with open("./style/landing_page_style.qss", "r") as file:
                qss = file.read()
                self.setStyleSheet(qss)
        except FileNotFoundError:
            print("QSS file not found. Using default styling.")

    def go_to_choosing_parts(self):
        """Switch to the choosing parts page in the stacked widget"""
        choosing_parts_page = self.stacked_widget.widget(3)
        main_window = self.stacked_widget.window()
        main_window.resize(choosing_parts_page.size())
        self.stacked_widget.setCurrentWidget(choosing_parts_page)
        bt = BuildTable()
        bt.create_build_table()

    def reload_database(self):
        """Reload the database by scraping and storing all data"""
        print("Reloading database...")
        self.scraper.scrape_all()
        self.data_controller.store_all_data()
        print("Database reloaded successfully.")
        self.go_to_choosing_parts()
        bt = BuildTable()
        bt.create_build_table()

    def add_tile(self):
        """Dynamically add a tile to the Socials tab scroll area"""

        # Create the tile frame
        tile = QtWidgets.QFrame()
        tile.setFixedSize(750, 600)  
        tile.setStyleSheet("""
            background-color: #cce5ff;
            border: 1px solid #2c88c4;
            border-radius: 10px;
            margin: 10px;
        """)

        # Create content for the tile
        layout = QtWidgets.QVBoxLayout(tile)

        # Add image placeholder
        image_label = QtWidgets.QLabel()
        image_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        image_label.setPixmap(QtGui.QPixmap(":/images/default_pc_image.png").scaled(
            400, 150, QtCore.Qt.AspectRatioMode.KeepAspectRatio  # Adjusted a bit for bigger tile
        ))

        # Add title
        title_label = QtWidgets.QLabel(f"PC Build {self.tile_counter + 1}")
        title_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("""
            font-size: 20px;
            font-weight: bold;
            font-family: Arial;
            margin-top: 10px;
        """)

        # Add visit button
        visit_btn = QtWidgets.QPushButton("Visit Build")
        visit_btn.setStyleSheet("""
            QPushButton {
                background-color: #2c88c4;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px;
                font-size: 16px;
                font-family: Arial;
            }
            QPushButton:hover {
                background-color: #1a6ea8;
            }
        """)

        # Add widgets to tile's layout
        layout.addWidget(image_label)
        layout.addWidget(title_label)
        layout.addWidget(visit_btn)

        # --- CHANGES BELOW ---

        # Create a vertical layout with horizontal centering
        if not hasattr(self, "tiles_layout"):
            self.tiles_layout = QtWidgets.QVBoxLayout(self.ui.scrollAreaWidgetContents)
            self.tiles_layout.setAlignment(QtCore.Qt.AlignmentFlag.AlignTop | QtCore.Qt.AlignmentFlag.AlignHCenter)
            self.tiles_layout.setSpacing(20)  # A little extra space between tiles

        self.tiles_layout.addWidget(tile)

        # Increment counter
        self.tile_counter += 1

    def update_labels(self):
        """Update the labels with the current user's username from the session"""
        username = Session().get_user()  # Get the current logged-in user
        if username:
            self.ui.label_3.setText(f"{username}")
            self.ui.label_11.setText(f"{username}")
            print(f"Welcome, {username}")
        else:
            self.ui.label_3.setText("Welcome")
            self.ui.label_11.setText("Not logged in")
            print("Not logged in")
    

    def load_user_builds(self):
        """Load and display all builds for the logged-in user."""
        try:
            connection = sqlite3.connect("data/database/database.sqlite")
            cursor = connection.cursor()

            # Get current logged-in username
            username = Session().get_user()
            if not username:
                print("No user logged in.")
                return
            else:
                print(f"Logged-in username: {username}")

            # Get user_id for the username
            cursor.execute("SELECT id FROM Users WHERE username = ?", (username,))
            result = cursor.fetchone()
            if not result:
                print("User not found in database.")
                return
            else:
                print(f"User ID for {username}: {result[0]}")
            
            user_id = result[0]

            # Get all builds for the user
            cursor.execute("SELECT build_id, price FROM Builds WHERE user_id = ?", (user_id,))
            builds = cursor.fetchall()

            if not builds:
                print("No builds found for this user.")
                return

            # Clear existing tiles
            if hasattr(self, "tiles_layout"):
                while self.tiles_layout.count():
                    item = self.tiles_layout.takeAt(0)
                    if item.widget():
                        item.widget().deleteLater()
            else:
                self.tiles_layout = QtWidgets.QVBoxLayout(self.ui.scrollAreaWidgetContents)
                self.tiles_layout.setAlignment(QtCore.Qt.AlignmentFlag.AlignTop | QtCore.Qt.AlignmentFlag.AlignHCenter)
                self.tiles_layout.setSpacing(20)
                self.tiles_layout.setContentsMargins(20, 20, 20, 20)

            # Create a tile for each build
            for build_id, price in builds:
                tile = QtWidgets.QFrame()
                tile.setFixedSize(750, 600)  # Adjusted height for a smaller title area
                tile.setStyleSheet("""
                    background-color: #cce5ff;
                    border: 1px solid #2c88c4;
                    border-radius: 10px;
                    margin: 10px;
                """)

                layout = QtWidgets.QVBoxLayout(tile)

                # Image
                image_label = QtWidgets.QLabel()
                image_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                image_label.setPixmap(QtGui.QPixmap("assets/pc_image.png").scaled(
                    400, 150, QtCore.Qt.AspectRatioMode.KeepAspectRatio
                ))

                # Title
                title_label = QtWidgets.QLabel(f"Build #{build_id}")
                title_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                title_label.setStyleSheet("""
                    font-size: 18px;
                    font-weight: bold;
                    font-family: Arial;
                    margin-top: 10px;
                """)

                # Price
                price_label = QtWidgets.QLabel(f"Total Price: ${price:.2f}" if price is not None else "Total Price: N/A")
                price_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                price_label.setStyleSheet("""
                    font-size: 16px;
                    font-family: Arial;
                    margin-top: 5px;
                """)

                # Visit button
                visit_btn = QtWidgets.QPushButton("Visit Build")
                visit_btn.setStyleSheet("""
                    QPushButton {
                        background-color: #2c88c4;
                        color: white;
                        border: none;
                        border-radius: 5px;
                        padding: 10px;
                        font-size: 16px;
                        font-family: Arial;
                    }
                    QPushButton:hover {
                        background-color: #1a6ea8;
                    }
                """)
                visit_btn.clicked.connect(lambda _, b_id=build_id: self.visit_build(b_id))  # Connect button to visit_build

                # Add widgets to tile
                layout.addWidget(image_label)
                layout.addWidget(title_label)
                layout.addWidget(price_label)
                layout.addWidget(visit_btn)

                # Add tile to layout
                self.tiles_layout.addWidget(tile)
            spacer = QtWidgets.QSpacerItem(700, 100, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
            self.tiles_layout.addItem(spacer)

        except Exception as e:
            print(f"Error loading user builds: {e}")

        finally:
            connection.close()
    
    def visit_build(self, build_id):
        """Handle the visit build button click."""
        print(f"Visiting build with ID: {build_id}")
        # Redirect to the BuildDetailsWindow and update it with the selected build
        details_page = self.stacked_widget.widget(15)  # Assuming BuildDetailsWindow is at index 15
        details_page.update_parts(build_id)  # Call the update_parts function with the build_id
        main_window = self.stacked_widget.window()
        main_window.resize(details_page.size())
        self.stacked_widget.setCurrentWidget(details_page)
    
    def refresh_page(self):
        print("Refreshing LandingPage...")
        self.load_user_builds()
